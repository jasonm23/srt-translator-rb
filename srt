#!/usr/bin/env ruby

require 'cgi'
require 'json'
require 'net/http'

require 'srt'
require 'thor'
require 'progress_bar'

class Array
  include ProgressBar::WithProgress
end

class ProgressBar
  def render_bar
    progress_percent = @count.to_f / @max.to_f
    _ = %x{osascript -e 'tell application "Progression" to update eta "#{format_interval(eta)}" progress #{progress_percent}'}
    nil
  end
end

class TranslateSubs < Thor

  desc "frameshift SRT_FILE FROM TO", "Shift the SRT_FILE framerate FROM TO. [e.g. '25fps' '29.97fps'])"

  def frameshift(srt_filename, from_fps, to_fps)
    STDERR.puts "Frame shifting #{srt_filename} from #{from_fps} to #{to_fps}"

    srt = parse srt_filename

    srt.timeshift({ from_fps => to_fps })

    STDOUT.puts srt.to_s
  end

  desc "timeshift SRT_FILE TIME", "timeshift the SRT_FILE by TIME [e.g. '+2.5s', '-5s']"

  def timeshift(srt_filename, time)
    STDERR.puts "Time shifting #{srt_filename} by #{time}"

    srt = parse srt_filename

    srt.timeshift all: time

    STDOUT.puts srt.to_s
  end

  desc 'translate SRT_FILE', 'translate SRT_FILE from (source language) to (translation language) (Default: en  ⟹  th)'
  option :combined, type: :boolean
  option :sl, default: 'en'
  option :tl, default: 'th'

  def translate(srt_filename)
    STDERR.puts "Translating srt: #{srt_filename}"
    _ = %x{osascript -e 'tell application "Progression" to update message "English  ⟹  Thai" title "#{clean srt_filename}"' }

    if options[:combined]
      STDERR.puts "#{options[:sl]} & #{options[:tl]}"
    else
      STDERR.puts "#{options[:sl]}  ⟹  #{options[:tl]}"
    end

    srt = parse srt_filename

    translated = process(srt)

    STDOUT.puts translated.to_s
  end

  desc 'text TEXT', 'translate TEXT from -sl to -tl. (Default: en  ⟹  th)'
  option :sl, default: 'en'
  option :tl, default: 'th'

  def text(text)
    STDOUT.puts google_translate text
  end

  no_commands do
    def exit_on_failure?
      exit 1
    end

    def clean(path)
      basename = File.basename path
      basename.sub(/[.][^.]*?[.][^.]*?$/,"")
    end

    def parse(srt)
      string = File.read srt

      # Force UTF8
      encoding_options = {invalid: :replace,
                          undef: :replace,
                          replace: ''}

      utf8 = string.encode(Encoding.find('UTF-8'), **encoding_options)

      SRT::File.parse utf8
    end

    def google_translate(text)
      encoded_text = CGI.escape text

      sl = options[:sl]
      tl = options[:tl]

      url = URI("https://translate.googleapis.com/translate_a/single?client=gtx&sl=#{sl}&tl=#{tl}&dt=t&q=#{encoded_text}")
      response = Net::HTTP.get url
      JSON.parse(response).first.first.first
    end

    def process(srt)
      # Modify srt structure in place
      srt.lines.each_with_progress do |srt_line|
        translated_text_lines = srt_line.text.map do |text|
          google_translate(text)
        end

        if options[:combined]
          srt_line.text += translated_text_lines
        else
          srt_line.text = translated_text_lines
        end
      end

      # Return the modified srt
      srt
    end
  end
end

TranslateSubs.start ARGV
